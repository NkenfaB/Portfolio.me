"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextDrawer = exports.validTypes = void 0;
const engine_1 = require("@tsparticles/engine");
exports.validTypes = ["text", "character", "char", "multiline-text"];
class TextDrawer {
    async draw(data) {
        const { drawText } = await Promise.resolve().then(() => __importStar(require("./Utils.js")));
        drawText(data);
    }
    async init(container) {
        const options = container.actualOptions;
        if (exports.validTypes.find((t) => (0, engine_1.isInArray)(t, options.particles.shape.type))) {
            const shapeOptions = exports.validTypes
                .map((t) => options.particles.shape.options[t])
                .find((t) => !!t), promises = [];
            (0, engine_1.executeOnSingleOrMultiple)(shapeOptions, (shape) => {
                promises.push((0, engine_1.loadFont)(shape.font, shape.weight));
            });
            await Promise.all(promises);
        }
    }
    async particleInit(container, particle) {
        if (!particle.shape || !exports.validTypes.includes(particle.shape)) {
            return;
        }
        const character = particle.shapeData;
        if (character === undefined) {
            return;
        }
        const textData = character.value;
        if (textData === undefined) {
            return;
        }
        particle.text = (0, engine_1.itemFromSingleOrMultiple)(textData, particle.randomIndexData);
        await Promise.resolve();
    }
}
exports.TextDrawer = TextDrawer;
