var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine", "./Options/Classes/Wobble.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WobbleUpdater = void 0;
    const engine_1 = require("@tsparticles/engine");
    const Wobble_js_1 = require("./Options/Classes/Wobble.js");
    const double = 2, doublePI = Math.PI * double, maxAngle = 360, moveSpeedFactor = 10, defaultDistance = 0;
    class WobbleUpdater {
        constructor(container) {
            this.container = container;
        }
        async init(particle) {
            const wobbleOpt = particle.options.wobble;
            if (wobbleOpt?.enable) {
                particle.wobble = {
                    angle: (0, engine_1.getRandom)() * doublePI,
                    angleSpeed: (0, engine_1.getRangeValue)(wobbleOpt.speed.angle) / maxAngle,
                    moveSpeed: (0, engine_1.getRangeValue)(wobbleOpt.speed.move) / moveSpeedFactor,
                };
            }
            else {
                particle.wobble = {
                    angle: 0,
                    angleSpeed: 0,
                    moveSpeed: 0,
                };
            }
            particle.retina.wobbleDistance =
                (0, engine_1.getRangeValue)(wobbleOpt?.distance ?? defaultDistance) * this.container.retina.pixelRatio;
            await Promise.resolve();
        }
        isEnabled(particle) {
            return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;
        }
        loadOptions(options, ...sources) {
            if (!options.wobble) {
                options.wobble = new Wobble_js_1.Wobble();
            }
            for (const source of sources) {
                options.wobble.load(source?.wobble);
            }
        }
        async update(particle, delta) {
            if (!this.isEnabled(particle)) {
                return;
            }
            const { updateWobble } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./Utils.js"))) : new Promise((resolve_1, reject_1) => { require(["./Utils.js"], resolve_1, reject_1); }).then(__importStar));
            updateWobble(particle, delta);
        }
    }
    exports.WobbleUpdater = WobbleUpdater;
});
