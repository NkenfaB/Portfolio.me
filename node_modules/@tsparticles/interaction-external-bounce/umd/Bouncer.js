var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine", "./Options/Classes/Bounce.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Bouncer = void 0;
    const engine_1 = require("@tsparticles/engine");
    const Bounce_js_1 = require("./Options/Classes/Bounce.js");
    const bounceMode = "bounce";
    class Bouncer extends engine_1.ExternalInteractorBase {
        constructor(container) {
            super(container);
        }
        clear() {
        }
        init() {
            const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;
            if (!bounce) {
                return;
            }
            container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;
        }
        async interact() {
            const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === engine_1.mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;
            if (mouseMoveStatus && hoverEnabled && (0, engine_1.isInArray)(bounceMode, hoverMode)) {
                const { mouseBounce } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./Utils.js"))) : new Promise((resolve_1, reject_1) => { require(["./Utils.js"], resolve_1, reject_1); }).then(__importStar));
                mouseBounce(this.container, (p) => this.isEnabled(p));
            }
            else {
                const { divBounce } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./Utils.js"))) : new Promise((resolve_2, reject_2) => { require(["./Utils.js"], resolve_2, reject_2); }).then(__importStar));
                divBounce(this.container, divs, bounceMode, (p) => this.isEnabled(p));
            }
        }
        isEnabled(particle) {
            const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;
            return ((!!mouse.position && events.onHover.enable && (0, engine_1.isInArray)(bounceMode, events.onHover.mode)) ||
                (0, engine_1.isDivModeEnabled)(bounceMode, divs));
        }
        loadModeOptions(options, ...sources) {
            if (!options.bounce) {
                options.bounce = new Bounce_js_1.Bounce();
            }
            for (const source of sources) {
                options.bounce.load(source?.bounce);
            }
        }
        reset() {
        }
    }
    exports.Bouncer = Bouncer;
});
