const checkOutMode = (outModes, outMode) => {
    return (outModes.default === outMode ||
        outModes.bottom === outMode ||
        outModes.left === outMode ||
        outModes.right === outMode ||
        outModes.top === outMode);
};
export class OutOfCanvasUpdater {
    constructor(container) {
        this._updateOutMode = async (particle, delta, outMode, direction) => {
            for (const updater of this.updaters) {
                await updater.update(particle, direction, delta, outMode);
            }
        };
        this.container = container;
        this.updaters = [];
    }
    async init(particle) {
        this.updaters = [];
        const outModes = particle.options.move.outModes;
        if (checkOutMode(outModes, "bounce")) {
            const { BounceOutMode } = await import("./BounceOutMode.js");
            this.updaters.push(new BounceOutMode(this.container));
        }
        else if (checkOutMode(outModes, "out")) {
            const { OutOutMode } = await import("./OutOutMode.js");
            this.updaters.push(new OutOutMode(this.container));
        }
        else if (checkOutMode(outModes, "destroy")) {
            const { DestroyOutMode } = await import("./DestroyOutMode.js");
            this.updaters.push(new DestroyOutMode(this.container));
        }
        else if (checkOutMode(outModes, "none")) {
            const { NoneOutMode } = await import("./NoneOutMode.js");
            this.updaters.push(new NoneOutMode(this.container));
        }
    }
    isEnabled(particle) {
        return !particle.destroyed && !particle.spawning;
    }
    async update(particle, delta) {
        const outModes = particle.options.move.outModes;
        await this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, "bottom");
        await this._updateOutMode(particle, delta, outModes.left ?? outModes.default, "left");
        await this._updateOutMode(particle, delta, outModes.right ?? outModes.default, "right");
        await this._updateOutMode(particle, delta, outModes.top ?? outModes.default, "top");
    }
}
