var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OutOfCanvasUpdater = void 0;
    const checkOutMode = (outModes, outMode) => {
        return (outModes.default === outMode ||
            outModes.bottom === outMode ||
            outModes.left === outMode ||
            outModes.right === outMode ||
            outModes.top === outMode);
    };
    class OutOfCanvasUpdater {
        constructor(container) {
            this._updateOutMode = async (particle, delta, outMode, direction) => {
                for (const updater of this.updaters) {
                    await updater.update(particle, direction, delta, outMode);
                }
            };
            this.container = container;
            this.updaters = [];
        }
        async init(particle) {
            this.updaters = [];
            const outModes = particle.options.move.outModes;
            if (checkOutMode(outModes, "bounce")) {
                const { BounceOutMode } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./BounceOutMode.js"))) : new Promise((resolve_1, reject_1) => { require(["./BounceOutMode.js"], resolve_1, reject_1); }).then(__importStar));
                this.updaters.push(new BounceOutMode(this.container));
            }
            else if (checkOutMode(outModes, "out")) {
                const { OutOutMode } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./OutOutMode.js"))) : new Promise((resolve_2, reject_2) => { require(["./OutOutMode.js"], resolve_2, reject_2); }).then(__importStar));
                this.updaters.push(new OutOutMode(this.container));
            }
            else if (checkOutMode(outModes, "destroy")) {
                const { DestroyOutMode } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./DestroyOutMode.js"))) : new Promise((resolve_3, reject_3) => { require(["./DestroyOutMode.js"], resolve_3, reject_3); }).then(__importStar));
                this.updaters.push(new DestroyOutMode(this.container));
            }
            else if (checkOutMode(outModes, "none")) {
                const { NoneOutMode } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./NoneOutMode.js"))) : new Promise((resolve_4, reject_4) => { require(["./NoneOutMode.js"], resolve_4, reject_4); }).then(__importStar));
                this.updaters.push(new NoneOutMode(this.container));
            }
        }
        isEnabled(particle) {
            return !particle.destroyed && !particle.spawning;
        }
        async update(particle, delta) {
            const outModes = particle.options.move.outModes;
            await this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, "bottom");
            await this._updateOutMode(particle, delta, outModes.left ?? outModes.default, "left");
            await this._updateOutMode(particle, delta, outModes.right ?? outModes.default, "right");
            await this._updateOutMode(particle, delta, outModes.top ?? outModes.default, "top");
        }
    }
    exports.OutOfCanvasUpdater = OutOfCanvasUpdater;
});
