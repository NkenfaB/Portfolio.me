"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OutOfCanvasUpdater = void 0;
const checkOutMode = (outModes, outMode) => {
    return (outModes.default === outMode ||
        outModes.bottom === outMode ||
        outModes.left === outMode ||
        outModes.right === outMode ||
        outModes.top === outMode);
};
class OutOfCanvasUpdater {
    constructor(container) {
        this._updateOutMode = async (particle, delta, outMode, direction) => {
            for (const updater of this.updaters) {
                await updater.update(particle, direction, delta, outMode);
            }
        };
        this.container = container;
        this.updaters = [];
    }
    async init(particle) {
        this.updaters = [];
        const outModes = particle.options.move.outModes;
        if (checkOutMode(outModes, "bounce")) {
            const { BounceOutMode } = await Promise.resolve().then(() => __importStar(require("./BounceOutMode.js")));
            this.updaters.push(new BounceOutMode(this.container));
        }
        else if (checkOutMode(outModes, "out")) {
            const { OutOutMode } = await Promise.resolve().then(() => __importStar(require("./OutOutMode.js")));
            this.updaters.push(new OutOutMode(this.container));
        }
        else if (checkOutMode(outModes, "destroy")) {
            const { DestroyOutMode } = await Promise.resolve().then(() => __importStar(require("./DestroyOutMode.js")));
            this.updaters.push(new DestroyOutMode(this.container));
        }
        else if (checkOutMode(outModes, "none")) {
            const { NoneOutMode } = await Promise.resolve().then(() => __importStar(require("./NoneOutMode.js")));
            this.updaters.push(new NoneOutMode(this.container));
        }
    }
    isEnabled(particle) {
        return !particle.destroyed && !particle.spawning;
    }
    async update(particle, delta) {
        const outModes = particle.options.move.outModes;
        await this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, "bottom");
        await this._updateOutMode(particle, delta, outModes.left ?? outModes.default, "left");
        await this._updateOutMode(particle, delta, outModes.right ?? outModes.default, "right");
        await this._updateOutMode(particle, delta, outModes.top ?? outModes.default, "top");
    }
}
exports.OutOfCanvasUpdater = OutOfCanvasUpdater;
