var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine", "./Options/Classes/Attract.js"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Attractor = void 0;
    const engine_1 = require("@tsparticles/engine");
    const Attract_js_1 = require("./Options/Classes/Attract.js");
    const attractMode = "attract";
    class Attractor extends engine_1.ExternalInteractorBase {
        constructor(engine, container) {
            super(container);
            this._engine = engine;
            if (!container.attract) {
                container.attract = { particles: [] };
            }
            this.handleClickMode = (mode) => {
                const options = this.container.actualOptions, attract = options.interactivity.modes.attract;
                if (!attract || mode !== attractMode) {
                    return;
                }
                if (!container.attract) {
                    container.attract = { particles: [] };
                }
                container.attract.clicking = true;
                container.attract.count = 0;
                for (const particle of container.attract.particles) {
                    if (!this.isEnabled(particle)) {
                        continue;
                    }
                    particle.velocity.setTo(particle.initialVelocity);
                }
                container.attract.particles = [];
                container.attract.finish = false;
                setTimeout(() => {
                    if (container.destroyed) {
                        return;
                    }
                    if (!container.attract) {
                        container.attract = { particles: [] };
                    }
                    container.attract.clicking = false;
                }, attract.duration * engine_1.millisecondsToSeconds);
            };
        }
        clear() {
        }
        init() {
            const container = this.container, attract = container.actualOptions.interactivity.modes.attract;
            if (!attract) {
                return;
            }
            container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;
        }
        async interact() {
            const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === engine_1.mouseMoveEvent, events = options.interactivity.events, { enable: hoverEnabled, mode: hoverMode } = events.onHover, { enable: clickEnabled, mode: clickMode } = events.onClick;
            if (mouseMoveStatus && hoverEnabled && (0, engine_1.isInArray)(attractMode, hoverMode)) {
                const { hoverAttract } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./Utils.js"))) : new Promise((resolve_1, reject_1) => { require(["./Utils.js"], resolve_1, reject_1); }).then(__importStar));
                hoverAttract(this.container, (p) => this.isEnabled(p));
            }
            else if (clickEnabled && (0, engine_1.isInArray)(attractMode, clickMode)) {
                const { clickAttract } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./Utils.js"))) : new Promise((resolve_2, reject_2) => { require(["./Utils.js"], resolve_2, reject_2); }).then(__importStar));
                clickAttract(this.container, (p) => this.isEnabled(p));
            }
        }
        isEnabled(particle) {
            const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;
            if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {
                return false;
            }
            const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;
            return (0, engine_1.isInArray)(attractMode, hoverMode) || (0, engine_1.isInArray)(attractMode, clickMode);
        }
        loadModeOptions(options, ...sources) {
            if (!options.attract) {
                options.attract = new Attract_js_1.Attract();
            }
            for (const source of sources) {
                options.attract.load(source?.attract);
            }
        }
        reset() {
        }
    }
    exports.Attractor = Attractor;
});
