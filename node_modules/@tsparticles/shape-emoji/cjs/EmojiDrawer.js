"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmojiDrawer = void 0;
const engine_1 = require("@tsparticles/engine");
const Constants_js_1 = require("./Constants.js");
const defaultFont = '"Twemoji Mozilla", Apple Color Emoji, "Segoe UI Emoji", "Noto Color Emoji", "EmojiOne Color"';
class EmojiDrawer {
    constructor() {
        this._emojiShapeDict = new Map();
    }
    destroy() {
        for (const [key, emojiData] of this._emojiShapeDict) {
            if (emojiData instanceof ImageBitmap) {
                emojiData?.close();
                this._emojiShapeDict.delete(key);
            }
        }
    }
    async draw(data) {
        const { drawEmoji } = await Promise.resolve().then(() => __importStar(require("./Utils.js")));
        drawEmoji(data);
    }
    async init(container) {
        const options = container.actualOptions;
        if (!Constants_js_1.validTypes.find((t) => (0, engine_1.isInArray)(t, options.particles.shape.type))) {
            return;
        }
        const promises = [(0, engine_1.loadFont)(defaultFont)], shapeOptions = Constants_js_1.validTypes
            .map((t) => options.particles.shape.options[t])
            .find((t) => !!t);
        if (shapeOptions) {
            (0, engine_1.executeOnSingleOrMultiple)(shapeOptions, (shape) => {
                if (shape.font) {
                    promises.push((0, engine_1.loadFont)(shape.font));
                }
            });
        }
        await Promise.all(promises);
    }
    particleDestroy(particle) {
        delete particle.emojiData;
    }
    async particleInit(container, particle) {
        const double = 2, shapeData = particle.shapeData;
        if (!shapeData?.value) {
            return;
        }
        const emoji = (0, engine_1.itemFromSingleOrMultiple)(shapeData.value, particle.randomIndexData), font = shapeData.font ?? defaultFont;
        if (!emoji) {
            return;
        }
        const key = `${emoji}_${font}`, existingData = this._emojiShapeDict.get(key);
        if (existingData) {
            particle.emojiData = existingData;
            return;
        }
        const canvasSize = (0, engine_1.getRangeMax)(particle.size.value) * double;
        let emojiData;
        const maxSize = (0, engine_1.getRangeMax)(particle.size.value);
        if (typeof OffscreenCanvas !== "undefined") {
            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext("2d");
            if (!context) {
                return;
            }
            context.font = `400 ${maxSize * double}px ${font}`;
            context.textBaseline = "middle";
            context.textAlign = "center";
            context.fillText(emoji, maxSize, maxSize);
            emojiData = canvas.transferToImageBitmap();
        }
        else {
            const canvas = document.createElement("canvas");
            canvas.width = canvasSize;
            canvas.height = canvasSize;
            const context = canvas.getContext("2d");
            if (!context) {
                return;
            }
            context.font = `400 ${maxSize * double}px ${font}`;
            context.textBaseline = "middle";
            context.textAlign = "center";
            context.fillText(emoji, maxSize, maxSize);
            emojiData = canvas;
        }
        this._emojiShapeDict.set(key, emojiData);
        particle.emojiData = emojiData;
        await Promise.resolve();
    }
}
exports.EmojiDrawer = EmojiDrawer;
