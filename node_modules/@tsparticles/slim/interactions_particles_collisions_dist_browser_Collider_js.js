/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.2.1
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_slim"] = this["webpackChunk_tsparticles_slim"] || []).push([["interactions_particles_collisions_dist_browser_Collider_js"],{

/***/ "../../interactions/particles/collisions/dist/browser/Collider.js":
/*!************************************************************************!*\
  !*** ../../interactions/particles/collisions/dist/browser/Collider.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Collider: () => (/* binding */ Collider)\n/* harmony export */ });\n/* harmony import */ var _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tsparticles/engine */ \"../../engine/dist/browser/index.js\");\n/* harmony import */ var _ResolveCollision_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ResolveCollision.js */ \"../../interactions/particles/collisions/dist/browser/ResolveCollision.js\");\n\n\nconst double = 2;\nclass Collider extends _tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.ParticlesInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  clear() {}\n  init() {}\n  async interact(p1, delta) {\n    if (p1.destroyed || p1.spawning) {\n      return;\n    }\n    const container = this.container,\n      pos1 = p1.getPosition(),\n      radius1 = p1.getRadius(),\n      query = container.particles.quadTree.queryCircle(pos1, radius1 * double);\n    for (const p2 of query) {\n      if (p1 === p2 || !p2.options.collisions.enable || p1.options.collisions.mode !== p2.options.collisions.mode || p2.destroyed || p2.spawning) {\n        continue;\n      }\n      const pos2 = p2.getPosition(),\n        radius2 = p2.getRadius();\n      if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n        continue;\n      }\n      const dist = (0,_tsparticles_engine__WEBPACK_IMPORTED_MODULE_0__.getDistance)(pos1, pos2),\n        distP = radius1 + radius2;\n      if (dist > distP) {\n        continue;\n      }\n      await (0,_ResolveCollision_js__WEBPACK_IMPORTED_MODULE_1__.resolveCollision)(p1, p2, delta, container.retina.pixelRatio);\n    }\n  }\n  isEnabled(particle) {\n    return particle.options.collisions.enable;\n  }\n  reset() {}\n}\n\n//# sourceURL=webpack://@tsparticles/slim/../../interactions/particles/collisions/dist/browser/Collider.js?");

/***/ }),

/***/ "../../interactions/particles/collisions/dist/browser/ResolveCollision.js":
/*!********************************************************************************!*\
  !*** ../../interactions/particles/collisions/dist/browser/ResolveCollision.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveCollision: () => (/* binding */ resolveCollision)\n/* harmony export */ });\nasync function resolveCollision(p1, p2, delta, pixelRatio) {\n  switch (p1.options.collisions.mode) {\n    case \"absorb\":\n      {\n        const {\n          absorb\n        } = await __webpack_require__.e(/*! import() */ \"interactions_particles_collisions_dist_browser_Absorb_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Absorb.js */ \"../../interactions/particles/collisions/dist/browser/Absorb.js\"));\n        absorb(p1, p2, delta, pixelRatio);\n        break;\n      }\n    case \"bounce\":\n      {\n        const {\n          bounce\n        } = await __webpack_require__.e(/*! import() */ \"interactions_particles_collisions_dist_browser_Bounce_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Bounce.js */ \"../../interactions/particles/collisions/dist/browser/Bounce.js\"));\n        bounce(p1, p2);\n        break;\n      }\n    case \"destroy\":\n      {\n        const {\n          destroy\n        } = await __webpack_require__.e(/*! import() */ \"interactions_particles_collisions_dist_browser_Destroy_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./Destroy.js */ \"../../interactions/particles/collisions/dist/browser/Destroy.js\"));\n        destroy(p1, p2);\n        break;\n      }\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/slim/../../interactions/particles/collisions/dist/browser/ResolveCollision.js?");

/***/ })

}]);