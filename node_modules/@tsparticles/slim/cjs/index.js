"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadSlim = void 0;
async function loadSlim(engine, refresh = true) {
    const { loadParallaxMover } = await Promise.resolve().then(() => __importStar(require("@tsparticles/move-parallax"))), { loadExternalAttractInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-attract"))), { loadExternalBounceInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-bounce"))), { loadExternalBubbleInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-bubble"))), { loadExternalConnectInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-connect"))), { loadExternalGrabInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-grab"))), { loadExternalPauseInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-pause"))), { loadExternalPushInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-push"))), { loadExternalRemoveInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-remove"))), { loadExternalRepulseInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-repulse"))), { loadExternalSlowInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-slow"))), { loadParticlesAttractInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-particles-attract"))), { loadParticlesCollisionsInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-particles-collisions"))), { loadParticlesLinksInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-particles-links"))), { loadEasingQuadPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-easing-quad"))), { loadEmojiShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-emoji"))), { loadImageShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-image"))), { loadLineShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-line"))), { loadPolygonShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-polygon"))), { loadSquareShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-square"))), { loadStarShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-star"))), { loadLifeUpdater } = await Promise.resolve().then(() => __importStar(require("@tsparticles/updater-life"))), { loadRotateUpdater } = await Promise.resolve().then(() => __importStar(require("@tsparticles/updater-rotate"))), { loadStrokeColorUpdater } = await Promise.resolve().then(() => __importStar(require("@tsparticles/updater-stroke-color"))), { loadBasic } = await Promise.resolve().then(() => __importStar(require("@tsparticles/basic")));
    await loadParallaxMover(engine, false);
    await loadExternalAttractInteraction(engine, false);
    await loadExternalBounceInteraction(engine, false);
    await loadExternalBubbleInteraction(engine, false);
    await loadExternalConnectInteraction(engine, false);
    await loadExternalGrabInteraction(engine, false);
    await loadExternalPauseInteraction(engine, false);
    await loadExternalPushInteraction(engine, false);
    await loadExternalRemoveInteraction(engine, false);
    await loadExternalRepulseInteraction(engine, false);
    await loadExternalSlowInteraction(engine, false);
    await loadParticlesAttractInteraction(engine, false);
    await loadParticlesCollisionsInteraction(engine, false);
    await loadParticlesLinksInteraction(engine, false);
    await loadEasingQuadPlugin();
    await loadEmojiShape(engine, false);
    await loadImageShape(engine, false);
    await loadLineShape(engine, false);
    await loadPolygonShape(engine, false);
    await loadSquareShape(engine, false);
    await loadStarShape(engine, false);
    await loadLifeUpdater(engine, false);
    await loadRotateUpdater(engine, false);
    await loadStrokeColorUpdater(engine, false);
    await loadBasic(engine, refresh);
}
exports.loadSlim = loadSlim;
